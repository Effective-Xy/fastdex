package fastdex.idea.models;

import com.android.builder.model.SourceProvider;
import com.android.prefs.AndroidLocation;
import com.android.sdklib.internal.avd.AvdInfo;
import com.android.sdklib.internal.avd.AvdManager;
import com.android.tools.idea.configurations.ConfigurationManager;
import com.android.tools.idea.databinding.DataBindingUtil;
import com.android.tools.idea.gradle.project.GradleSyncListener;
import com.android.tools.idea.model.AndroidModel;
import com.android.tools.idea.model.AndroidModuleInfo;
import com.android.tools.idea.rendering.AppResourceRepository;
import com.android.tools.idea.rendering.LocalResourceRepository;
import com.android.tools.idea.rendering.ProjectResourceRepository;
import com.android.tools.idea.rendering.RenderService;
import com.android.utils.ILogger;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.util.Key;
import com.intellij.openapi.util.UserDataHolderBase;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiClass;
import com.intellij.psi.PsiElement;
import com.intellij.util.keyFMap.KeyFMap;
import com.intellij.util.xml.ConvertContext;
import com.intellij.util.xml.DomElement;
import org.jetbrains.android.compiler.AndroidAutogeneratorMode;
import org.jetbrains.android.dom.manifest.Manifest;
import org.jetbrains.android.facet.AndroidFacet;
import org.jetbrains.android.facet.AndroidFacetType;
import org.jetbrains.android.facet.ClassMapConstructor;
import org.jetbrains.android.facet.IdeaSourceProvider;
import org.jetbrains.android.facet.ResourceFolderManager;
import org.jetbrains.android.resourceManagers.LocalResourceManager;
import org.jetbrains.android.resourceManagers.ResourceManager;
import org.jetbrains.android.resourceManagers.SystemResourceManager;
import org.jetbrains.android.sdk.AndroidSdkData;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.jps.android.model.impl.JpsAndroidModuleProperties;

import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Created by tong on 17/9/21.
 */

public class AndroidFacetWrapper extends AndroidFacet {
    private AndroidFacet base;

    public AndroidFacetWrapper(AndroidFacet base) {
        super(base.getModule(), base.getName(), base.getConfiguration());

        this.base = base;
    }

    @Override
    public boolean isAutogenerationEnabled() {
        return base.isAutogenerationEnabled();
    }

    @Override
    public boolean requiresAndroidModel() {
        return base.requiresAndroidModel();
    }

    @Override
    @Nullable
    public AndroidModel getAndroidModel() {
        return new AndroidModelWrapper(base.getAndroidModel());
    }

    @Override
    public void setAndroidModel(@Nullable AndroidModel androidModel) {
        base.setAndroidModel(androidModel);
    }

    @Override
    public boolean isLibraryProject() {
        return base.isLibraryProject();
    }

    @Override
    public void setLibraryProject(boolean library) {
        base.setLibraryProject(library);
    }

    @Override
    @NotNull
    public SourceProvider getMainSourceProvider() {
        return base.getMainSourceProvider();
    }

    @Override
    @NotNull
    public IdeaSourceProvider getMainIdeaSourceProvider() {
        return base.getMainIdeaSourceProvider();
    }

    @Override
    public ResourceFolderManager getResourceFolderManager() {
        return base.getResourceFolderManager();
    }

    @Override
    @NotNull
    public List<VirtualFile> getAllResourceDirectories() {
        return base.getAllResourceDirectories();
    }

    @Override
    @Deprecated
    @Nullable
    public VirtualFile getPrimaryResourceDir() {
        return base.getPrimaryResourceDir();
    }

    @Override
    public boolean isGeneratedFileRemoved(@NotNull AndroidAutogeneratorMode mode) {
        return base.isGeneratedFileRemoved(mode);
    }

    @Override
    public void clearAutogeneratedFiles(@NotNull AndroidAutogeneratorMode mode) {
        base.clearAutogeneratedFiles(mode);
    }

    @Override
    public void markFileAutogenerated(@NotNull AndroidAutogeneratorMode mode, @NotNull VirtualFile file) {
        base.markFileAutogenerated(mode, file);
    }

    @Override
    @NotNull
    public Set<String> getAutogeneratedFiles(@NotNull AndroidAutogeneratorMode mode) {
        return base.getAutogeneratedFiles(mode);
    }

    @Override
    public void androidPlatformChanged() {
        //base.androidPlatformChanged();
    }

    @Override
    @NotNull
    public AvdInfo[] getAllAvds() {
        return base.getAllAvds();
    }

    @Override
    @NotNull
    public AvdInfo[] getValidCompatibleAvds() {
        return base.getValidCompatibleAvds();
    }

    @Override
    @Nullable
    public AvdManager getAvdManagerSilently() {
        return base.getAvdManagerSilently();
    }

    @Override
    public AvdManager getAvdManager(ILogger log) throws AndroidLocation.AndroidLocationException {
        return base.getAvdManager(log);
    }

    @Override
    @Nullable
    public AndroidSdkData getSdkData() {
        return base.getSdkData();
    }

    public static void createDynamicTemplateMenu() {
        AndroidFacet.createDynamicTemplateMenu();
    }

    @Override
    public void initFacet() {
        base.initFacet();
    }

    @Override
    public void disposeFacet() {
        base.disposeFacet();
    }

    @Nullable
    public static AndroidFacet getInstance(@NotNull Module module) {
        return AndroidFacet.getInstance(module);
    }

    @Nullable
    public static AndroidFacet getInstance(@NotNull ConvertContext context) {
        return AndroidFacet.getInstance(context);
    }

    @Nullable
    public static AndroidFacet getInstance(@NotNull PsiElement element) {
        return AndroidFacet.getInstance(element);
    }

    @Nullable
    public static AndroidFacet getInstance(@NotNull DomElement element) {
        return AndroidFacet.getInstance(element);
    }

    @Override
    @Nullable
    public ResourceManager getResourceManager(@Nullable String resourcePackage) {
        return base.getResourceManager(resourcePackage);
    }

    @Override
    @Nullable
    public ResourceManager getResourceManager(@Nullable String resourcePackage, @Nullable PsiElement contextElement) {
        return base.getResourceManager(resourcePackage, contextElement);
    }

    @Override
    @NotNull
    public LocalResourceManager getLocalResourceManager() {
        return base.getLocalResourceManager();
    }

    @Override
    @Nullable
    public SystemResourceManager getSystemResourceManager() {
        return base.getSystemResourceManager();
    }

    @Override
    @Nullable
    public SystemResourceManager getSystemResourceManager(boolean publicOnly) {
        return base.getSystemResourceManager(publicOnly);
    }

    @Override
    @Nullable
    public Manifest getManifest() {
        return base.getManifest();
    }

    @NotNull
    public static AndroidFacetType getFacetType() {
        return AndroidFacet.getFacetType();
    }

    @Override
    @NotNull
    public Map<String, PsiClass> getClassMap(@NotNull String className, @NotNull ClassMapConstructor constructor) {
        return base.getClassMap(className, constructor);
    }

    @Override
    public int getModuleMinApi() {
        return base.getModuleMinApi();
    }

    @Override
    public void scheduleSourceRegenerating(@NotNull AndroidAutogeneratorMode mode) {
        base.scheduleSourceRegenerating(mode);
    }

    @Override
    public boolean cleanRegeneratingState(@NotNull AndroidAutogeneratorMode mode) {
        return base.cleanRegeneratingState(mode);
    }

    @Override
    @NotNull
    public ConfigurationManager getConfigurationManager() {
        return base.getConfigurationManager();
    }

    @Override
    @Contract("true -> !null")
    @Nullable
    public ConfigurationManager getConfigurationManager(boolean createIfNecessary) {
        return base.getConfigurationManager(createIfNecessary);
    }

    @Override
    @Contract("true -> !null")
    @Nullable
    public AppResourceRepository getAppResources(boolean createIfNecessary) {
        return base.getAppResources(createIfNecessary);
    }

    @Override
    @Contract("true -> !null")
    @Nullable
    public ProjectResourceRepository getProjectResources(boolean createIfNecessary) {
        return base.getProjectResources(createIfNecessary);
    }

    @Override
    @Contract("true -> !null")
    @Nullable
    public LocalResourceRepository getModuleResources(boolean createIfNecessary) {
        return base.getModuleResources(createIfNecessary);
    }

    @Override
    public void refreshResources() {
        base.refreshResources();
    }

    @Override
    @NotNull
    public JpsAndroidModuleProperties getProperties() {
        return base.getProperties();
    }

    @Override
    public boolean isDataBindingEnabled() {
        return base.isDataBindingEnabled();
    }

    @Override
    public void setDataBindingEnabled(boolean dataBindingEnabled) {
        base.setDataBindingEnabled(dataBindingEnabled);
    }

    @Override
    public void addListener(@NotNull GradleSyncListener listener) {
        base.addListener(listener);
    }

    @Override
    @NotNull
    public AndroidModuleInfo getAndroidModuleInfo() {
        return super.getAndroidModuleInfo();
    }

    @Override
    @NotNull
    public RenderService getRenderService() {
        return base.getRenderService();
    }

    @Override
    public void setLightBrClass(DataBindingUtil.LightBrClass lightBrClass) {
        base.setLightBrClass(lightBrClass);
    }

    @Override
    public DataBindingUtil.LightBrClass getLightBrClass() {
        return base.getLightBrClass();
    }

    @Override
    public boolean isDisposed() {
        return base.isDisposed();
    }

    @Override
    public String toString() {
        return base.toString();
    }

    @Override
    public Object clone() {
        //return base.clone();
        return super.clone();
    }

    @Override
    public String getUserDataString() {
        return base.getUserDataString();
    }

    @Override
    public void copyUserDataTo(@NotNull UserDataHolderBase other) {
        base.copyUserDataTo(other);
    }

    @Override
    public <T> T getUserData(@NotNull Key<T> key) {
        return base.getUserData(key);
    }

    @Override
    @NotNull
    public KeyFMap getUserMap() {
        //return base.getUserMap();
        return super.getUserMap();
    }

    @Override
    public <T> void putUserData(@NotNull Key<T> key, @Nullable T value) {
        base.putUserData(key, value);
    }

    @Override
    public boolean changeUserMap(KeyFMap oldMap, KeyFMap newMap) {
        //return base.changeUserMap(oldMap, newMap);
        return super.changeUserMap(oldMap, newMap);
    }

    @Override
    public <T> T getCopyableUserData(@NotNull Key<T> key) {
        return base.getCopyableUserData(key);
    }

    @Override
    public <T> void putCopyableUserData(@NotNull Key<T> key, T value) {
        base.putCopyableUserData(key, value);
    }

    @Override
    public <T> boolean replace(@NotNull Key<T> key, @Nullable T oldValue, @Nullable T newValue) {
        return base.replace(key, oldValue, newValue);
    }

    @Override
    @NotNull
    public <T> T putUserDataIfAbsent(@NotNull Key<T> key, @NotNull T value) {
        return base.putUserDataIfAbsent(key, value);
    }

    @Override
    public void copyCopyableDataTo(@NotNull UserDataHolderBase clone) {
        base.copyCopyableDataTo(clone);
    }

    @Override
    public void clearUserData() {
        //base.clearUserData();
        super.clearUserData();
    }

    @Override
    public void setUserMap(@NotNull KeyFMap map) {
        //base.setUserMap(map);
        super.setUserMap(map);
    }

    @Override
    public boolean isUserDataEmpty() {
        return base.isUserDataEmpty();
    }
}
